this pointer holds the address of the current object. In simple words, you can say that this pointer points to the current object of the class. 
There can be three main usages of this keyword in C++.
To resolve ambiguity between class variables and parameters having same name.
To return the current object (used in method chaining).
To pass the current object as an argument to another function.


this keyword ek pointer hai jo current object ko represent karta hai.
Matlab jis object ke liye function call hua hai, this usi object ko point karta hai.

⚙️ Problem without this:
For example, maine ek class banayi Cricketer:

#include<iostream>
using namespace std;

class Cricketer {
public:
    string name;
    int runs;

    Cricketer(string name, int runs) {
        name = name;   // ❌ confusion
        runs = runs;
    }
};


Ab jab hum object banate hain:

Cricketer c1("Virat Kohli", 25000);


Toh output mein garbage values milengi.
Kyun?
Kyuki constructor ke andar likha hai name = name;
Yahan dono name ek jaise hain — compiler confuse ho jaata hai.
Woh samajhta hi nahi ki kis name ki baat kar rahe ho — class wale ki ya parameter wale ki.
Result: class ke variables assign hi nahi hote, aur garbage value aa jaati hai.

✅ Solution using this:

Hum likhte hain:

Cricketer(string name, int runs) {
    this->name = name;   // ✅ now clear
    this->runs = runs;
}


Yahan kya hua:
this->name → class ka name
name → constructor ka parameter

So ab koi confusion nahi hai.
Jo value pass ki gayi hai, woh class ke member variables mein store ho jaayegi.

💡 Behind the scenes:

Jab hum likhte hain:

Cricketer c1("Virat Kohli", 25000);


Toh internally ye hota hai:

Ek object c1 ban gaya.

Uske andar 2 boxes: name aur runs.

Constructor call hua — aur this pointer c1 ko point kar raha hai.

Jab hum likhte hain this->name = name;, iska matlab hota hai
“c1 wale name mein ye wala name daal do.”

💬 Why we can’t use c1 directly:

Constructor ke andar c1 likh hi nahi sakte, kyunki class ek blueprint hoti hai,
aur c1 to sirf ek object hai jo main() ke andar bana hai.
Toh uske jagah this use karte hain — this hi current object ko represent karta hai.

#include<iostream>
using namespace std;

class Cricketer {
public:
    string name;
    int runs;

    Cricketer(string name, int runs) {
        this->name = name;
        this->runs = runs;
    }

    void display() {
        cout << "Name: " << name << ", Runs: " << runs << endl;
    }
};

int main() {
    Cricketer c1("Virat Kohli", 25000);
    Cricketer c2("Rohit Sharma", 18000);
    c1.display();
    c2.display();
}


ques
What is this pointer?
this pointer is accessible only inside the member functions of a class and points to the object that has called this member function.

When is it necessary to use this pointer?
Suppose we have two local variables with the same name as the data members’ names. Suppose you want to assign the local variable value to the data members. 
In that case, you won’t be able to do until unless you use this pointer because the compiler won’t know that you are referring to the object’s data members unless you use this pointer.
